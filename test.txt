# scanfcl tests
001 " 0.25s x" "%e%3c" (0.25 "s x")
002 " 1.25s x" "%5s%2c" ("1.25s" " x")
003 " 2.25s x" "%las%2c" (2.25 " x")
004 " 3.25S x" "%4aS%3c" (3.25 " x")
005 "0x10 10" "%x %x" (#x10 #x10)
005 "P012349876" "P%1d%4d%4d" (0 1234 9876)
006 "P112349876" "P%1d%4d%4d" (1 1234 9876)
007 "1000" "%lld" (1000)
009 "static char Term_bits[] = {" "static char %s = {" ("Term_bits[]")
010 "x ]" "%[^] ]" ("x")
011 " ] x" "%[] ]" (" ] ")
012 "-.10000E+020.20000E+020.25000E+010.40000E+010.50000E+010.12500E+01" "%11lf%11lf%11lf%11lf%11lf%11lf" (-.10000E+02 0.20000E+02 0.25000E+01 0.40000E+01 0.50000E+01 0.12500E+01)
013 "0.10000E+020.20000E+020.25000E+010.40000E+010.50000E+010.12500E+01" "%11lf%11lf%11lf%11lf%11lf%11lf" (0.10000E+02 0.20000E+02 0.25000E+01 0.40000E+01 0.50000E+01 0.12500E+01)
014 "-1234567E0198765432E0912345678901987654321091234567890198765432109" "%11lf%11lf%11lf%11lf%11lf%11lf" (-1.234567e7 9.8765432d16 1.2345678901d10 9.8765432109d10 1.2345678901d10 9.8765432109d10)
015 "-0.1000E+020.20000E+020.25000E+010.40000E+010.50000E+010.12500E+01" "%11lf%11lf%11lf%11lf%11lf%11lf" (-0.1000E+02 0.20000E+02 0.25000E+01 0.40000E+01 0.50000E+01 0.12500E+01)
016 "-12345678987654321123456789987654321123456789987654321" "%9ld%9ld%9ld%9ld%9ld%9ld" (-12345678 987654321 123456789 987654321 123456789 987654321)
017 "-" "%g" (0)
018 "." "%g" (0)
019 "+" "%g" (0)
020 "1e" "%f" (1)
# by analogy to %f
021 "-" "%d" (0)
022 "-1" "%d" (-1)
023 "123" "%1d" (1)
024 "+1" "%d" (1)
025 "0000" "%d" (0)
026 "123" "%4d" (123)
027 "1234" "%3i" (123)
028 "1234" "%8i" (1234)
029 "1234" "%i" (1234)
030 "-1234" "%i" (-1234)
031 "-1234" "%3i" (-12)
032 "+1234" "%3i" (12)
033 "012" "%i" (#o12)
034 "+012" "%i" (#o12)
035 "-012" "%i" (-10)
036 "01234" "%3i" (#o12)
037 "-01234" "%3i" (-1)
038 "0x1234" "%i" (#x1234)
039 "0x1234" "%3i" (1)
040 "+0X1234" "%i" (#x1234)
041 "+0X1234" "%3i" (0)
042 "+0X1234" "%5i" (#x12)
043 "-0x12" "%i" (-18)
044 "-" "%u" (0)
# or is this 0xFF...
045 "-1" "%u" (-1)
046 "123" "%1u" (1)
047 "+1" "%u" (1)
048 "0000" "%u" (0)
049 "123" "%4u" (123)
050 "123" "%x" (#x123)
051 "123" "%2x" (#x12)
052 "123" "%4x" (#x123)
053 "-123" "%2x" (-1)
054 "123" "%o" (#o123)
055 "123" "%2o" (#o12)
056 "123" "%4o" (#o123)
057 "-123" "%o" (-83)
058 "ABC" "%x" (#xABC)
059 "abc" "%x" (#xabc)
060 "AbC" "%x" (#xabc)
061 "abc" "%c" ("a")
062 "abc" "%3c" ("abc")
063 "abc" "%s" ("abc")
064 "abc" "%2s" ("ab")
065 "abc " "%s" ("abc")
066 "1" "%a" (1)
067 "1" "%f" (1)
068 "1" "%g" (1)
069 "1" "%e" (1)
070 "0x1" "%a" (1)
071 "0xA" "%a" (#xa)
072 "-1" "%a" (-1)
073 "1." "%a" (1)
074 "0xa." "%a" (#xa)
075 "0xDEAD.BEEFpFF" "%a" (57005.745834350586d0)
076 "%" "%%" ()
077 "abcba" "%[abc]" ("abcba")
078 "aabcba" "%[ab]" ("aab")
079 "abcba" "%[aba]" ("ab")
080 "abcba" "%1[abc]" ("a")
081 "abcba" "%[^c]" ("ab")
082 "[[[" "%[[]" ("[[[")
083 "]]]" "%[]]" ("]]]")
084 "abcd\"" "%[^\"]" ("abcd")
085 " 123 123 123" "%d%s%g" (123 "123" 123)
086 "" "%g" ()
087 "foo bar baz" "foo %*s %3c" ("baz")
088 "foo bar baz" "%s %s %g" ("foo" "bar")
089 "25 54.32E-1 thompson" "%d%f%s" (25 5.432d0 "thompson")
090 "56789 0123 56a72" "%2d%f%*d  %[0123456789]" (56 789.0 "56")
091 "2 quarts of oil" "%f%20s of %20s" (2 "quarts" "oil")
092 "-12.8degrees Celsius" "%f%20s of %20s" (-12.8 "degrees")
093 "lots of luck" "%f%20s of %20s" ()
094 "10.0LBS     of        dirt" "%f%20s of %20s" (10.0 "LBS" "dirt")
# The C standard says this should fail as '"100e" fails to match "%f"
# but Harbison and Steele (5th) says "If no digits are seen after the
# letter introducing the exponent, then the exponent part of the
# representation is assumed to be zero." (p383)
# They also say (same page) "If no digits are read ... then the
# value is zero." This behaviour seems more useful.
095 "100ergs of energy" "%f%20s of %20s" (100.0d0 "rgs" "energy")
